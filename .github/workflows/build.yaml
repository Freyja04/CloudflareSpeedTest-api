name: Build and Release

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17'

      - name: Build project
        run: go build -o cloudflare-speedtest-api.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: cloudflare-speedtest-api
          path: |
            cloudflare-speedtest-api.exe
            ip.txt
            config.yaml

  release:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: cloudflare-speedtest-api
          path: .

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "V5.0"
          release_name: "CloudflareSpeedTest-api"
          body: |
            v5.0
            config.yaml和ip.txt
            这两个文件必须下载下来和 CloudflareSpeedTest-api.exe放到同一路径下

      - name: Upload cloudflare-speedtest-api.exe
        id: upload-release-asset-exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cloudflare-speedtest-api.exe
          asset_name: cloudflare-speedtest-api.exe
          asset_content_type: application/octet-stream

      - name: Upload ip.txt
        id: upload-release-asset-ip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ip.txt
          asset_name: ip.txt
          asset_content_type: text/plain

      - name: Upload config.yaml
        id: upload-release-asset-config
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./config.yaml
          asset_name: config.yaml
          asset_content_type: text/plain






